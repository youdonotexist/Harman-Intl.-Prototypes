{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Calibri;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 HTML5/JS Prototype notes:\
\
Individual PixiJS canvases were used to render the EQ Graphs, AngularJS was used to structure views, and the Ionic Framework was used to handle layouts.\
\
Typing _Randomize() into the JS console will kick off the PEQGraph performance test. \
\
The view you see lives in the /app/partials/CanvasTest.html file. It consists of a horizontal scrollview populated with a bunch of channel components. Each channel has 4 EQGraphs that operate as the primary mechanism for testing performance. \
\
\pard\pardeftab720

\f1\b\fs28 \cf0 Web/HTML5/Javascript (PixiJS, AngularJS):
\b0 \
Initial experiments ({\field{\*\fldinst{HYPERLINK "https://docs.google.com/spreadsheet/ccc?key=0AkRPeAKJ3zJDdDFzZWEwRTl3UUZXNldMTzNjek1LZVE&usp=sharing"}}{\fldrslt \cf2 \ul \ulc2 https://docs.google.com/spreadsheet/ccc?key=0AkRPeAKJ3zJDdDFzZWEwRTl3UUZXNldMTzNjek1LZVE&usp=sharing}}) found that a webGL/canvas-based solution worked great on desktop, but performance had to be scaled back on mobile pretty dramatically once the number of controls went above 20. As the number of controls increased, the time in which they were updated had to be reduced to 500ms in order to provide a responsive user interface. On older hardware, the situation was even worse.\'a0\
\
Experiments from other teams showed issues with applications experiencing weird pauses in execution. The cause of this wasn\'92t exactly clear, but was probably related to one of the following: the single threaded nature of Javascript applications, too many simultaneous incoming events, or managed clean-up by the garbage collector.\

\b \
\pard\pardeftab720

\i\b0 \cf0 Conclusion
\i0\b :
\b0 \'a0HTML5/Javascript is better suited for simpler applications where the UI updates are constrained to just a handful of simple controls. A good candidate for this would be a pure-mobile phone application where the currently rendered state is limited to a few controls.\'a0}